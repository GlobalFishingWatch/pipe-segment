#standardSQL
#
# Create a segment info table with one row per seg_id from segment_identity_daily
# Includes the entire time range from the source table
#

# Include some utility functions
{% include 'util.sql.j2' %}

CREATE TEMP FUNCTION mostCommonMinFreq() AS ({{most_common_min_freq}});

WITH
  segments as (
  SELECT
    * except (ident_count),
    IFNULL(ident_count, msg_count - pos_count) as ident_count
  FROM
    `{{ segment_identity_daily }}*`
  ),
  #
  # Aggregate daily segment identity counts over the full time range
  # and reduce each identity field to just the most commonly occuring value
  segment_most_common as (
  SELECT
    seg_id,
    ssvid,
    MIN(first_timestamp) as first_timestamp,
    MAX(last_timestamp) as last_timestamp,
    SUM(msg_count) as msg_count,
    SUM(pos_count) as pos_count,
    SUM(ident_count) as ident_count,
    LOGICAL_OR(noise) as noise,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(shipname  )), SUM(ident_count), mostCommonMinFreq()) as shipname,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(callsign  )), SUM(ident_count), mostCommonMinFreq()) as callsign,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(imo       )), SUM(ident_count), mostCommonMinFreq()) as imo,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(n_shipname)), SUM(ident_count), mostCommonMinFreq()) as n_shipname,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(n_callsign)), SUM(ident_count), mostCommonMinFreq()) as n_callsign,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(n_imo     )), SUM(ident_count), mostCommonMinFreq()) as n_imo,
    minFreqFilter(mostCommon(ARRAY_CONCAT_AGG(shiptype  )), SUM(ident_count), mostCommonMinFreq()) as shiptype
  FROM
    segments
  GROUP by
    ssvid,
    seg_id
  )

SELECT
  *
FROM
  segment_most_common
